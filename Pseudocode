Youssif Hassanein

Group8_Summer2011_Android

/**NOTE FOR DR. SHANKAR:  I thought it would be more beneficial if I had mixed the mock-up technical details and the class pseudocode together, rather than write them individually.  This way, when programming I can see the exact layout of the entire program.  I hope you will understand.  Thanks.*/

IHUNGRY Pseudocode & Mock-Up Details

/**NOTE:  For all classes which extend the Activity class, each will load their respective XML layouts located in the resources. */

/**NOTE:  For all classes where a constructor is not explicitly defined, a constructor is not defined. */

Class MainActivity extends Activity implements OnClickListener

/**This is the main activity which is the first screen the user will see.  It displays the different services offered by the program IHUNGRY.  Each selection is created by an Intent object which is then started by the function StartActivity(Intent) when the OnClickListener fires.

1.	Create Music object
1.	Call Play() to begin music
2.	Display View objects for each menu item
1.	START
1.	On Start, startactivity Story
2.	HI-SCORES
1.	On HiScores, startactivity HiScores
3.	SETTINGS
1.	On Settings, startactivity Settings
4.	CREDITS
1.	On Credits, startactivity Credits
5.	EXIT
1.	On Exit, Finish this activity
3.	Add  OnClickListeners for each menu item

Class Story extends Activity implements OnClickListener

/**This is the screen the user arrives at when he/she selects the START button.  This screen tells the player the background story of the game.*/

1.	Display View object for continue button
2.	Add OnClickListener to the continue button
1.	On click, startactivity instructions

Class Instructions extends Activity implements OnClickListener

/**When the story screen is left by the player, the player comes to this screen, which explains to the user how to play IHUNGRY.*/

1.	Display View object for continue button
2.	Add OnClickListener to the continue button
1.	On click, startactivity game

Class Game extends Activity implements OnClickListener

/**Past the instructions, the user initiates the game.  The game primarily functions by thread/timer events, which are handled appropriately.  The handlers then are responsible for animation, food instantiation, and life checking.*/

1.	Create timer object
2.	Create thread objects
3.	Create character object
4.	Create primitive int score
5.	Create array of food on screen
6.	Display Menu button //if user wants to return to the menu
1.	On click, startactivity MainActivity
7.	while(User has not lost)
1.	Call character getX() and getY()
1.	At character x and y, load character PNG from resources
2.	Wait for timer event
1.	On timer event
1.	For all food items, call food items move()
3.	Wait for timer event
1.	On timer event
1.	Create Food object(FoodList(getRandFood(getRandInt))) at random x, random y
2.	Add food object to food array
4.	Watches for Food collision event
1.	On Collision Event
1.	score+= add(Character calls eat food item method(food item))
2.	Food object is destroyed
3.	Check Character lives
1.	If Lives == 0
1.	Call character Death()
2.	startactivity PlayerLose(score)

Class Music

/**The user does not see this class's implementation.  This class simply provides the functionality necessary to play IHUNGRY's music.*/

1.	Create Play() method //simply loads music into the audio buffer
2.	Create Stop() method // simply empties music in the audio buffer

Class Sound

/**The user does not see this class's implementation.  This class simply provides the functionality necessary to play IHUNGRY's sound fx.*/

1.	Create Play() method //simply plays sound single time, then stops
2.	Create Stop() method // simply empties music in the audio buffer


Class HiScores extends Activity implements OnClickListener

/**When the user selects the HiScores button on the main activity, he/she is brought to this screen, which displays the user's highscores based on past attempts to succeed in the game.  This class implements a file system supported by android in the JDK.*/

1.	Create method Void setScores()
1.	Load static HiScore holder object from file
2.	Sets HiScores array equal to hiscores field
2.	Call Display Hiscores method, which is private to this class
1.	DisplayHiScores(array scores)
1.	For each score
1.	Display score on screen
3.	Display Menu button //if user wants to return to the menu

Class Settings extends Activity implements OnClickListener

/**When the user selects the Settings button on the main activity, he/she is brought to this screen, which displays the user's settings based on previous preferences.  This class implements a file system supported by android in the JDK.*/

1.	Display Options
1.	Music On/Off
1.	Binary decision – single click reverses on or off
2.	Calls Play() or Stop(), depending on current boolean
2.	Sound FX On/Off
1.	Binary decision – single click reverses on or off
2.	Calls Play() or Stop(), depending on current boolean
3.	Reset HiScores
1.	On click, retrieve HiScores from local file
2.	Call method reset() on HiScores
2.	Display Menu button //if user wants to return to the menu

Class Credits extends Activity implements OnClickListener

/**When the user selects the Credits button on the main activity, he/she is brought to this screen, which displays the deserved credits to Qianru Zhang, Young-Rae Kim, and Youssif Hassanein.

1.	Display Credits
2.	Display Menu button //if user wants to return to the menu

Class Character

/**The user does not see this class's implementation.  This class is the representation of the character in IHUNGRY, his motion, and his appetite.*/

1.	Primitive int x;
2.	Primitive int y;
3.	Primitive int lives = 3;
4.	getX();
5.	getY();
6.	setX(int aX);
7.	setY(int aY);
8.	int Eat(Food food)
1.	If call to food value < 0
1.	lives--;
2.	else
1.	return food value
9.	Int getLives()
10.	Void Death()
1.	Shake character
1.	For, add values to x and y, subtract values to x and y
2.	Destroy this

Class PlayerLose extends Activity implements OnClickListener

/**When the user loses the current game, by having 0 lives, he/she is brought to this screen via new Activity.  The user sees his/her score in the match and the previous 7 highscores of previous matches.*/

1.	Constructor (score)
1.	Sets this objects score field to user's score
2.	Load static HiScore holder object from file
1.	Sets HiScores array equal to hiscores field
3.	Call Hiscore holder object's setScores(score) method //in order to update the hiscores
4.	Display Message “You Lost.  Try Again”
5.	Display User's score from finished match
6.	Display HiScores
7.	Display Retry button
1.	On click, startactivity Game
8.	Display Menu button
1.	On click, startactivity MainActivity

Class HiScoreHolder

/**The user does not see this class's implementation.  This class simply contains an array which will have the highscores of the user.*/

1.	Contains a long array of 7 values, originally each element set to 0
2.	Contains a string array of 7 values, originally each element set to “”
3.	Create setScores(score), method
1.	Request string name
2.	boolean greaterthanPrevious
3.	for (int I = 7; I > 0; i--)
1.	Check if score is greater than array[I]
1.	If score is greater than array[I] and I == 0
1.	Call setScore(intarray[i], stringarray[i])
2.	Set intarray[i] = score
3.	Set stringarray[i] = name
2.	If so,greaterthanPrevious = true; continue;
2.	else
1.	if (greaterthanPrevious)
1.	Call setScores(intarray[i-1], stringarray[i-1]);
2.	Set intarray[i-1] = score;
3.	Set stringarray[i-1] = name;
2.	else
1.	return
4.	Overload setScores(score, name) method
1.	Same as previous, but do not request name
5.	Create Void reset() method
1.	Sets all string names to “”
2.	Sets all int values to 0;

Class FoodList

/**The user does not see this class's implementation.  This class is used to store the resource values and is implemented in order to simply code for the food class.*/

1.	Contains a static array of food pictures;
2.	Static getRandInt();
3.	Static getRandPicture(int I);
1.	Returns a food item at the location I in the array of food pictures

Class Food

/**The user does not see this class's implementation.  Objects of this class represent food items, their movement, and consumption.*/

1.	int x;
2.	int y;
3.	Constructor(image in resources)
1.	Randomize x;
2.	Set picture int to image in resources
4.	Void Move()
1.	Add pixels to y;
5.	Void Destroy()
1.	Destroy this
